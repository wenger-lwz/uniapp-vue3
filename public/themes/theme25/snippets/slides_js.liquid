{% comment %}
  文档：https://gitlab.xfcart.site/shoplaza/fe_guide/-/blob/master/slides.md
  @model
  index: 目前的索引,
  lastChangeIndex: 上一个的索引,
  qty: 实际图片数量,
  imagesQty: 理想图片数量,
  angle: 360/qty,
  startX: 点击的开始位置X,
  startY: 点击的开始位置Y,
  swipeLength: 水平滑动距离,
  verticalSwipeLength: 垂直滑动距离,
  isMousedown: 是否按下,
  isScrolling: 是否垂直滑动,
  isSwiping: 是否水平滑动,
  autoplay: 自动轮播,
  autoplaySpeed: 自动轮播时间,
  vertical: 垂直模式,
  rotateDirection: 旋转方向,
{% endcomment %}
{% if settings.slideLoaded != true %}
  {% javascript %}
    $.fn.slides = function (params) {
      params = params || {};
      var $slides = $(this);
      var id = $slides.data('slides-id');
      var $content = $slides.find('.slides-content');
      var $item = $slides.find('.slides-item');
      var dot = '.slides-'+id+'-dot';
      var arrow = '.slides-'+id+'-arrow';
      var slides = {
        init: function(){
          if ($slides.length && id){
            if (slides.model.imagesQty > 1) {
              slides.resize();
              slides.swiping();
              slides.arrow();
              slides.dots();
              slides.autoplay();
              slides.slidesGoTo();
            }
            $slides.addClass('slides-initialized')
          }
        },
        model: {
          index: +$slides.data('slides-active') || 0,
          lastChangeIndex: +$slides.data('slides-active') || 0,
          qty: $slides.data('slides-qty'), //实际图片数量
          imagesQty: $slides.data('slides-images-qty'),//理想图片数量
          angle: $slides.data('slides-angle'),
          startX: 0,
          startY: 0,
          swipeLength: 0,
          verticalSwipeLength: 0,
          isMousedown: false,
          isScrolling: false,
          isSwiping: false,
          autoplay: params.autoplay || false,
          autoplaySpeed: params.autoplaySpeed || 5000,
          vertical: params.vertical || false,
          rotateDirection: params.vertical ? 'rotateX' : 'rotateY',
        },
        getIndex: function(i, dontReal){
          var qty = dontReal ? slides.model.qty : slides.model.imagesQty;
          return Math.ceil((i%qty + qty)%qty)
        },
        changeSlide: function(i, dontAnimate){
          var index = slides.model.index, lastChangeIndex = slides.model.lastChangeIndex, angle = slides.model.angle, vertical = slides.model.vertical, rotateDirection = slides.model.rotateDirection, deg = (vertical ? 1 : -1)*angle*i, nextRealIndex = slides.getIndex(index > i ? i%1 == 0 ? i : i-1 : i, true), $next = $slides.find('.slides-item-'+ nextRealIndex), currentRealIndex = slides.getIndex(index, true), currentIndex = slides.getIndex(index), nextIndex = slides.getIndex(i);
          $next.find('.lazy-lazyload').removeClass("lazy-lazyload").addClass("lazyload");
          index != i && i%1 == 0 && $slides.trigger('beforeChange', {
            currentSlide: {realIndex: currentRealIndex, index: currentIndex, $slide: $slides.find('.slides-item-'+currentRealIndex)},
            nextSlide: {realIndex: nextRealIndex, index: nextIndex, $slide: $next}
          });
          $({deg: (vertical ? 1 : -1)*angle*lastChangeIndex}).animate({ deg: deg },{ duration: (dontAnimate ? 0 : 300), easing: 'linear', step: function (now){ $content.css({ transform: rotateDirection +"(" + now + "deg)" })}})
          if(index != i && i%1 == 0){
            $(dot+'.slides-dot-active').removeClass('slides-dot-active');
            $(dot+'[data-index='+ slides.getIndex(i) +']').addClass('slides-dot-active');
            $content.find('.slides-active').removeClass('slides-active')
            $next.addClass('slides-active');
            slides.model.index = index = i;
            $slides.attr('data-slides-active', i);
            $slides.trigger('afterChange', {
              currentSlide: {realIndex: nextRealIndex, index: nextIndex, $slide: $next},
            });
          }
          slides.model.lastChangeIndex = lastChangeIndex = i;
        },
        arrow: function(){
          $(document).off('click', arrow).on('click', arrow, function(e){
            slides.changeSlide(slides.model.index + { prev: -1, next: 1 }[$(this).data("direction")])
            clearInterval($slides[0].autoplayInterval)
          })
        },
        dots: function(){
          var index = slides.model.index;
          var lastChangeIndex = slides.model.lastChangeIndex;
          $(document).off('click', dot).on('click', dot, function(e){
            slides.changeSlide($(this).data('index') - slides.getIndex(parseInt(lastChangeIndex)) + index )
            clearInterval($slides[0].autoplayInterval)
          })
        },
        swiping: function(){
          $slides
            .off('mousedown touchstart').on('mousedown touchstart', function(e){
              slides.model.isMousedown = true;
              slides.model.startX = e.clientX != undefined ? e.clientX : e.originalEvent.changedTouches[0].clientX;
              slides.model.startY = e.clientY != undefined ? e.clientY : e.originalEvent.changedTouches[0].clientY;
              slides.model.swipeLength = slides.model.verticalSwipeLength = 0;
              clearInterval($slides[0].autoplayInterval)
            })
            .off('mousemove touchmove').on('mousemove touchmove', $.throttle(function(e){
              var isMousedown = slides.model.isMousedown;
              if(isMousedown && e){
                var index = slides.model.index;
                var startX = slides.model.startX;
                var startY = slides.model.startY;
                var clientX = e.clientX != undefined ? e.clientX : e.originalEvent.changedTouches[0].clientX;
                var clientY = e.clientY != undefined ? e.clientY : e.originalEvent.changedTouches[0].clientY;
                var vertical = slides.model.vertical;
                var distance = vertical ? startY - clientY : startX - clientX;
                var totalDistance = vertical ? $slides.innerHeight() : $slides.innerWidth();
                slides.model.swipeLength = Math.round(Math.sqrt(Math.pow(clientX - startX, 2)));
                slides.model.verticalSwipeLength = Math.round(Math.sqrt(Math.pow(clientY - startY,2)));
                $slides.addClass('slides-swiping');
                slides.changeSlide(index+distance/totalDistance, true);
              }
            }, 16, 16))
            .off('mouseup mouseleave touchend').on('mouseup mouseleave touchend', function(e){
              var isMousedown = slides.model.isMousedown;
              if(isMousedown){
                var index = slides.model.index;
                var startX = slides.model.startX;
                var startY = slides.model.startY;
                var clientX = e.clientX != undefined ? e.clientX : e.originalEvent.changedTouches[0].clientX;
                var clientY = e.clientY != undefined ? e.clientY : e.originalEvent.changedTouches[0].clientY;
                var vertical = slides.model.vertical;
                slides.model.isScrolling = false;
                slides.model.isSwiping = false;
                slides.model.isMousedown = false;
                var distance = vertical ? startY - clientY : startX - clientX;
                $slides.removeClass('slides-swiping');
                Math.abs(distance) > 100
                  ? distance < 0 ? slides.changeSlide(index-1) : slides.changeSlide(index+1)
                  : slides.changeSlide(index)
              }
            })
            .off('click.slides').on('click.slides', function(e){
              var swipeLength = slides.model.swipeLength;
              if(swipeLength > 10){
                e.stopImmediatePropagation();
                e.stopPropagation();
                e.preventDefault();
              }
            })
          //移动端左右拖动时阻止默认行为
          $slides[0].addEventListener('touchmove', function (e) {
            if(e){
              var swipeLength = slides.model.swipeLength;
              var verticalSwipeLength = slides.model.verticalSwipeLength;
              var isSwiping = slides.model.isSwiping;
              if(!isSwiping && verticalSwipeLength > 10){
                slides.model.isScrolling = true;
                return;
              }
              // https://stackoverflow.com/questions/26478267/touch-move-getting-stuck-ignored-attempt-to-cancel-a-touchmove
              if(swipeLength > 10 && e.cancelable){
                slides.model.isSwiping = true;
                e.preventDefault();
              }
            }
          }, {passive: false});
        },
        autoplay: function(){
          if(slides.model.autoplay){
            var index = slides.model.index;
            clearInterval($slides[0].autoplayInterval)
            $slides[0].autoplayInterval = setInterval(function(){
              slides.changeSlide(++index)
            }, slides.model.autoplaySpeed); 
          }   
        },
        resize: function(){
          $(window).off('resize.'+id).on('resize.'+id, $.throttle(function () {
            var index = slides.model.index;
            var angle = slides.model.angle;
            var vertical = slides.model.vertical;
            var rotateDirection = slides.model.rotateDirection;
            var translateZ = (vertical ? $item.innerHeight() : $item.innerWidth()) / 2 / Math.tan(Math.PI / slides.model.qty);
            $content.css({ transform: rotateDirection + "(" + (vertical ? 1 : -1)*angle*index + "deg)" })
            $item.each(function(i){$(this).css('transform', rotateDirection + '('+ (vertical ? -1 : 1)*i*angle +'deg) translateZ('+ translateZ +'px)')})
          }, 16, 16)).trigger('resize.'+id);
        },
        slidesGoTo: function(){
          $slides.off('slidesGoTo').on('slidesGoTo', function (e, data) {
            var i = data.i;
            var dontAnimate = data.dontAnimate;
            var index = slides.model.index;
            var imagesIndex = slides.getIndex(index);
            if(imagesIndex == i || i%1 != 0){return}
            slides.changeSlide(i - imagesIndex + index, dontAnimate)
          })
        },
      }
      slides.init()
      return $slides;
    }
  {% endjavascript %}
{% endif %}